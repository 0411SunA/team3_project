[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Team_Project3",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "유나.html",
    "href": "유나.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "현주.html",
    "href": "현주.html",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/LSBigdata_Project1/data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n# 변수 추가 및 삭제\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n# 월급\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "선아.html",
    "href": "선아.html",
    "title": "이삭토스트 맛있조",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "결론.html",
    "href": "결론.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "한결.html",
    "href": "한결.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "현주.html#전처리",
    "href": "현주.html#전처리",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/LSBigdata_Project1/data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n# 변수 추가 및 삭제\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n# 월급\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "현주.html#년도별-여행지-선택-5순위",
    "href": "현주.html#년도별-여행지-선택-5순위",
    "title": "여행을 선택하는 이유",
    "section": "년도별 여행지 선택 5순위",
    "text": "년도별 여행지 선택 5순위\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 한글 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\ndf = pd.read_excel(\"./pre_data/pre_select.xlsx\")\ndf\n\ndf_2018 = df.loc[0:14]\ndf_2019 = df.loc[15:29]\ndf_2020 = df.loc[30:44]\ndf_2021 = df.loc[45:59]\ndf_2022 = df.loc[60:74]\n\ntotal_2018 = df_2018.sort_values(\"total\", ascending = False).head()\ntotal_2019 = df_2019.sort_values(\"total\", ascending = False).head()\ntotal_2020 = df_2020.sort_values(\"total\", ascending = False).head()\ntotal_2021 = df_2021.sort_values(\"total\", ascending = False).head()\ntotal_2022 = df_2022.sort_values(\"total\", ascending = False).head()\n\ntotal_all = pd.concat([total_2018, total_2019, total_2020, total_2021, total_2022]).iloc[:, :3]\ntotal_all_pivot = total_all.pivot(index='year', columns='item', values='total')\ntotal_all_pivot.plot(kind='bar', figsize=(10, 6))\n\nfig = px.bar(total_all_pivot, title='년도별 여행지 선택 5순위', labels={'value': '총합', 'year': '년도'})\n# 레이아웃 설정\nfig.update_layout(\n    xaxis_title='Year',\n    yaxis_title='Total',\n    legend_title_text='Item',\n    legend=dict(\n        x=1,  # x 위치 (1은 그래프의 가장 오른쪽)\n        y=1,  # y 위치 (1은 그래프의 가장 위쪽)\n        xanchor='left',  # x 기준점\n        yanchor='top'  # y 기준점\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "현주.html#여행을-선택하는-이유",
    "href": "현주.html#여행을-선택하는-이유",
    "title": "여행을 선택하는 이유",
    "section": "여행을 선택하는 이유",
    "text": "여행을 선택하는 이유\n\n#선 그래프\nvisualappeal = total_all.query(\"item == '볼거리 제공'\")\nPopularity = total_all.query(\"item == '여행지 지명도'\")\ntime = total_all.query(\"item == '여행할 수 있는 시간'\")\n\n\n# 선 그래프 생성\nplt.figure(figsize=(10, 6))\nplt.plot(visualappeal[\"year\"], visualappeal[\"total\"], marker='o',label=\"볼거리 제공\")\nplt.plot(Popularity[\"year\"], Popularity[\"total\"], marker='o',label=\"여행지 지명도\")\nplt.plot(time[\"year\"], time[\"total\"], marker='o',label=\"여행할 수 있는 시간\")\n\n\n# 그래프에 제목과 축 레이블 추가\nplt.title(\"여행을 선택하는 이유 - 전체\")\nplt.xlabel(\"년도\")\nplt.ylabel(\"전체 %\")\nplt.legend(fontsize='x-small',loc='center left')\nplt.show()"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---남자",
    "href": "현주.html#여행지-고르는-이유---남자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 남자",
    "text": "여행지 고르는 이유 - 남자\n\n#남자\nmale_2018 = df_2018[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2019 = df_2019[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2020 = df_2020[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2021 = df_2021[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2022 = df_2022[[\"item\", \"male\"]].sort_values(by=\"item\")\n\nmale_All = pd.merge(male_2018, male_2019, how = 'left', on = 'item')\nmale_All = pd.merge(male_All, male_2020, how = 'left', on = 'item', suffixes=('', '_2020'))\nmale_All = pd.merge(male_All, male_2021, how = 'left', on = 'item', suffixes=('', '_2021'))\nmale_All = pd.merge(male_All, male_2022, how = 'left', on = 'item', suffixes=('', '_2022'))\n\n\n# 각 연도별 열 이름 변경 (이미 올바르게 되어있다면 생략 가능)\nmale_All.columns = ['item', 'male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nmale_All['total_male'] = male_All[['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_male 기준으로 정렬\nmale_All = male_All.drop(columns=['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']).sort_values(by='total_male', ascending=False)\n\nmale_All.head()\n\nM = male_All.head().plot.bar(rot = 0, color='green', title='여행지 고르는 이유 순위 - 남자')\nM.set_xticklabels(['볼거리', '지명도', '이동거리', '여행시간', '동반자유형'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---여자",
    "href": "현주.html#여행지-고르는-이유---여자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 여자",
    "text": "여행지 고르는 이유 - 여자\n\n# 여자 데이터 정렬\nfemale_2018 = df_2018[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2019 = df_2019[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2020 = df_2020[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2021 = df_2021[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2022 = df_2022[[\"item\", \"female\"]].sort_values(by=\"item\")\n\n# 데이터 병합\nfemale_All = pd.merge(female_2018, female_2019, how='left', on='item', suffixes=('_2018', '_2019'))\nfemale_All = pd.merge(female_All, female_2020, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2021, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2022, how='left', on='item')\n\n# 각 연도별 열 이름 변경 (필요한 경우)\nfemale_All.columns = ['item', 'female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nfemale_All['total_female'] = female_All[['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_female 기준으로 내림차순 정렬\nfemale_All = female_All.drop(columns=['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']).sort_values(by='total_female', ascending=False)\n\nF =female_All.head().plot.bar(rot = 0, color='blue', title='여행지 고르는 이유 순위 - 여자')\nF.set_xticklabels(['볼거리', '지명도', '여행시간', '이동거리', '음식'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "선아.html#전처리",
    "href": "선아.html#전처리",
    "title": "이삭토스트 맛있조",
    "section": "전처리",
    "text": "전처리\n\nimport numpy as np\nimport pandas as pd\n\n# 데이터 로드\ntour_2018 = pd.read_csv('data/ranking_2018.csv', encoding='cp949')\ntour_2019 = pd.read_csv('data/ranking_2019.csv', encoding='cp949')\ntour_2020 = pd.read_csv('data/ranking_2020.csv', encoding='cp949')\ntour_2021 = pd.read_csv('data/ranking_2021.csv', encoding='cp949')\ntour_2022 = pd.read_csv('data/ranking_2022.csv', encoding='cp949')\n\n# 열 이름 변경\nrename_dict = {'순위': 'ranking', '광역시/도': 'state', '시/군/구': 'city', '관광지명': 'spot',\n               '도로명주소': 'address', '중분류 카테고리': 'category_m', '소분류 카테고리': 'category_s', '검색건수': 'search_count'}\n\ntour_2018.rename(columns=rename_dict, inplace=True)\ntour_2019.rename(columns=rename_dict, inplace=True)\ntour_2020.rename(columns=rename_dict, inplace=True)\ntour_2021.rename(columns=rename_dict, inplace=True)\ntour_2022.rename(columns=rename_dict, inplace=True)\n\n\n# 'cate_remove' 목록 정의\ncate_remove = ['교통시설', '면세점', '백화점', '쇼핑몰', '대형마트', '기타쇼핑시설']\n\n# 각 연도별 데이터에서 'cate_remove' 목록에 해당하는 카테고리를 제거\ntour_2018 = tour_2018[~tour_2018['category_s'].isin(cate_remove)]\ntour_2019 = tour_2019[~tour_2019['category_s'].isin(cate_remove)]\ntour_2020 = tour_2020[~tour_2020['category_s'].isin(cate_remove)]\ntour_2021 = tour_2021[~tour_2021['category_s'].isin(cate_remove)]\ntour_2022 = tour_2022[~tour_2022['category_s'].isin(cate_remove)]\n\n\n# 각 데이터프레임에 연도 열 추가\ntour_2018['year'] = 2018\ntour_2019['year'] = 2019\ntour_2020['year'] = 2020\ntour_2021['year'] = 2021\ntour_2022['year'] = 2022\n\n\n# 데이터 결합\ntours = [tour_2018, tour_2019, tour_2020, tour_2021, tour_2022]\ntour_total = pd.concat(tours, ignore_index=True)\n\n# 불필요한 열 삭제\ntour_total.drop(columns=['address', 'ranking'], inplace=True)\n\n\n# 'combined_city' 열 추가\ntour_total['combined_city'] = tour_total['state'] + \" \" + tour_total['city']\n\n# 결과 저장\ntour_total.to_excel('total_tour.xlsx', index=False)\n# 결과 확인\ntour_total.info()\nprint(tour_total.head(40))  # 상위 40개 행 출력\nprint(tour_total['category_s'].unique())  # 카테고리 확인\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1373 entries, 0 to 1372\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   state          1373 non-null   object\n 1   city           1373 non-null   object\n 2   spot           1373 non-null   object\n 3   category_m     1373 non-null   object\n 4   category_s     1373 non-null   object\n 5   search_count   1373 non-null   int64 \n 6   year           1373 non-null   int64 \n 7   combined_city  1373 non-null   object\ndtypes: int64(2), object(6)\nmemory usage: 85.9+ KB\n      state      city         spot category_m   category_s  search_count  \\\n0     서울특별시       강남구          코엑스       문화관광         전시시설        456473   \n1       경기도   용인시 처인구         에버랜드       문화관광         테마공원        330266   \n2     서울특별시       동작구      노량진수산시장         쇼핑           시장        251985   \n3     서울특별시       송파구  가락동농수산물도매시장         쇼핑           시장        231899   \n4     서울특별시       용산구   CGV용산아이파크몰       문화관광         공연시설        227562   \n5     인천광역시        중구      을왕리해수욕장       자연관광  자연경관(하천/해양)        217836   \n6       경기도  고양시 일산서구     킨텍스제1전시장       문화관광         전시시설        214874   \n7     서울특별시       송파구      롯데월드잠실점       문화관광         테마공원        212754   \n8   전북특별자치도   전주시 완산구       전주한옥마을       역사관광        역사유적지        212376   \n9     인천광역시        중구          월미도       자연관광  자연경관(하천/해양)        207328   \n10  강원특별자치도       속초시     속초관광수산시장         쇼핑           시장        192140   \n11  강원특별자치도       강릉시         경포해변       자연관광  자연경관(하천/해양)        188157   \n12     충청남도       보령시       대천해수욕장       자연관광  자연경관(하천/해양)        186565   \n13    인천광역시       남동구         소래포구       자연관광  자연경관(하천/해양)        181965   \n14    서울특별시      영등포구      여의도한강공원       문화관광         도시공원        176908   \n15      경기도  고양시 일산서구     킨텍스제2전시장       문화관광         전시시설        174400   \n16      경기도       구리시   구리농수산물도매시장         쇼핑           시장        169352   \n17  강원특별자치도       속초시         속초해변       자연관광  자연경관(하천/해양)        165529   \n18      경기도   용인시 기흥구        한국민속촌       역사관광        역사유적지        163291   \n19      경기도  고양시 일산동구       일산호수공원       문화관광         도시공원        163209   \n20    부산광역시      해운대구      해운대해수욕장       자연관광  자연경관(하천/해양)        162178   \n21    인천광역시       연수구      송도센트럴파크       문화관광         도시공원        161025   \n22  제주특별자치도       제주시       동문재래시장         쇼핑           시장        159847   \n23      경기도       과천시        서울대공원       문화관광         테마공원        159486   \n24  강원특별자치도       정선군      강원랜드카지노       문화관광      기타문화관광지        158750   \n25    인천광역시        중구         연안부두       자연관광  자연경관(하천/해양)        156143   \n26      경기도       파주시      헤이리예술마을       기타관광         기타관광        154418   \n27    부산광역시       수영구      광안리해수욕장       자연관광  자연경관(하천/해양)        152219   \n28  제주특별자치도      서귀포시    서귀포매일올레시장         쇼핑           시장        151192   \n29    서울특별시       광진구       어린이대공원       문화관광         테마공원        149671   \n30    인천광역시       남동구    소래포구종합어시장         쇼핑           시장        147823   \n31  강원특별자치도       강릉시         주문진항       자연관광  자연경관(하천/해양)        147683   \n32  강원특별자치도       양양군          낙산사       역사관광         종교성지        147174   \n33      경기도       파주시     마장호수출렁다리       기타관광         기타관광        142273   \n34      경기도       광명시         광명동굴       자연관광         자연생태        137326   \n35    서울특별시       서초구    예술의전당콘서트홀       문화관광         공연시설        136970   \n36    부산광역시       기장군        해동용궁사       역사관광         종교성지        135424   \n37  강원특별자치도       원주시    원주소금산출렁다리       기타관광         기타관광        131047   \n38    부산광역시      해운대구       송정해수욕장       자연관광  자연경관(하천/해양)        129772   \n39  강원특별자치도       강릉시         안목해변       자연관광  자연경관(하천/해양)        128148   \n\n    year    combined_city  \n0   2018        서울특별시 강남구  \n1   2018      경기도 용인시 처인구  \n2   2018        서울특별시 동작구  \n3   2018        서울특별시 송파구  \n4   2018        서울특별시 용산구  \n5   2018         인천광역시 중구  \n6   2018     경기도 고양시 일산서구  \n7   2018        서울특별시 송파구  \n8   2018  전북특별자치도 전주시 완산구  \n9   2018         인천광역시 중구  \n10  2018      강원특별자치도 속초시  \n11  2018      강원특별자치도 강릉시  \n12  2018         충청남도 보령시  \n13  2018        인천광역시 남동구  \n14  2018       서울특별시 영등포구  \n15  2018     경기도 고양시 일산서구  \n16  2018          경기도 구리시  \n17  2018      강원특별자치도 속초시  \n18  2018      경기도 용인시 기흥구  \n19  2018     경기도 고양시 일산동구  \n20  2018       부산광역시 해운대구  \n21  2018        인천광역시 연수구  \n22  2018      제주특별자치도 제주시  \n23  2018          경기도 과천시  \n24  2018      강원특별자치도 정선군  \n25  2018         인천광역시 중구  \n26  2018          경기도 파주시  \n27  2018        부산광역시 수영구  \n28  2018     제주특별자치도 서귀포시  \n29  2018        서울특별시 광진구  \n30  2018        인천광역시 남동구  \n31  2018      강원특별자치도 강릉시  \n32  2018      강원특별자치도 양양군  \n33  2018          경기도 파주시  \n34  2018          경기도 광명시  \n35  2018        서울특별시 서초구  \n36  2018        부산광역시 기장군  \n37  2018      강원특별자치도 원주시  \n38  2018       부산광역시 해운대구  \n39  2018      강원특별자치도 강릉시  \n['전시시설' '테마공원' '시장' '공연시설' '자연경관(하천/해양)' '역사유적지' '도시공원' '기타문화관광지' '기타관광'\n '종교성지' '자연생태' '레저스포츠시설' '랜드마크관광' '자연경관(산)' '복합관광시설' '자연공원' '육상레저스포츠'\n '기타레저스포츠' '웰니스관광' '농/산/어촌체험' '자연관광(산)' '데이트코스' '수상레저스포츠']"
  }
]