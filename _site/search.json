[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "여행 데이터 시각화",
    "section": "",
    "text": "사용한 데이터 : 월별 여행 횟수, 지역별 관광지 검색 순위, 관광 여행 정보 획득 경로, 관광여행 방문지 선택이유(1순위)"
  },
  {
    "objectID": "유나.html",
    "href": "유나.html",
    "title": "여행 정보를 얻는 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\nroute\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = 2018\nroute.loc[9:17,\"year\"] = 2019\nroute.loc[18:26,\"year\"] = 2020\nroute.loc[27:35,\"year\"] = 2021\nroute.loc[36:43,\"year\"] = 2022\nroute[\"year\"]=route[\"year\"].astype(int)\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\nroute.isna().sum()\n\n# 항목\nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n                \n# 가구\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n\n# 학벌\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n\nroute.head(20)\n\n# 전처리한 데이터 파일 추출\nroute.to_excel('pre_route.xlsx', index=False)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\1872833859.py:19: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`"
  },
  {
    "objectID": "현주.html",
    "href": "현주.html",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "선아.html",
    "href": "선아.html",
    "title": "이삭토스트 맛있조",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "결론.html",
    "href": "결론.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "한결.html",
    "href": "한결.html",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "https://kosis.kr/statHtml/statHtml.do?orgId=113&tblId=DT_113_STBL_1029207&vw_cd=MT_ZTITLE&list_id=314_31401_013&scrId=&seqNo=&lang_mode=ko&obj_var_id=&itm_id=&conn_path=MT_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do\n국내 여행의 의미\n\n공간의 범위\n행정구역상 현 거주지를 벗어나 다른 지역(시/군)을 다녀온 모든 여행을 의미\n활동의 범위\n\n관광 여행\n관광, 맛집 투어, 박물관, 전시 구경, 스포츠, 레저 체험 등의 모든 활동\n기타 여행\n명절 귀성, 가족 행사, 출장, 업무 세미나 등 모든 활동\n\n\n\n\n\n\n\nData 저장 경로 규칙\n\n원본 데이터 : data 폴더의 R_월별_국내여행_횟수_20240714204514.xlsx\n전처리 이후 데이터 : pre_data 폴더의 p_num_trip.xlsx\n\n데이터의 기본 단위 : 천회\n데이터 전처리\n\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n# 데이터 불러오기\n# data : 원본 파일 저장 폴더\n# pre_data : 전처리 후 파일 저장 폴더\n\n# header를 두번째 행으로 고정\nnum_trip = pd.read_excel('data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n# 데이터 전처리\n\n# 열(columns)의 변수명 변경\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n# 열(columns)의 파생변수 생성\n# 연령 \n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상을 청소년, 청년, 중년, 노년 층으로 구분\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n# 가구소득\n# 저소득 ~ 200 만원 / 중위소득 200~500 만원 / 고소득 500~600이상 / 무응답\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n# 100만원 미만, 100~200만원 미만, 200~300만원 미만, 300~400만원 미만,\n# 400~500만원 미만, 500~600만원 미만, 600만원 이상, 무응답 총 8열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n# 열(columns) 삭제\n# 직업 - 직업과 여행 횟수간의 상관관계가 크게 없다고 판단하여\n# 임금봉급근로자, 고용원있는사업주, 고용원없는자영업자\n# 무급가족 종사자, 사무전문, 기술생산노무, 판매서비스\n# 자영업, 학생, 전업주부, 무직은퇴, 기타\n# 12개의 열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n# 데이터 전처리 시\n# 원본 : 39개 열, 파생변수 : 4 + 4 = 8 개열 생성, 열 삭제 : 27개 열 삭제\n# 39 + 4 + 4 - 27 = 20 개의 columns이 생성됩니다.\n\n# 데이터 확인\nnum_trip.info() \nnum_trip.shape\nnum_trip.describe()\nnum_trip.head(12)\nnum_trip.tail(12)\n\n# 데이터 문제점\n# 1. year의 null값을 채워야함\n# 2018, 2019, 2020, 2021, 2022 슬라이싱\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\n# 2. month의 '월'값을 제거한 후 int값으로 형 변환 필요\n# str 에서 맨 마지막 글자 제거\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\n# 3. nr(월급 미 응답자)의 nan값이 '-'로 대응되어 있음\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n# 데이터를 data폴더에 전처리 이후 데이터로 excel형태로 추출하고 형태 확인\n# Unnamed: 0 이라는 인덱스가 생성되는 것을 방지하기 위해 index=False로 지정\n# 가공된 데이터라는 의미인 (processing) 의 p를 파일 앞에 붙여 전처리 유무 구분\nnum_trip.to_excel(excel_writer = 'pre_data/p_num_trip.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           5 non-null      float64\n 1   month          60 non-null     object \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             60 non-null     object \ndtypes: float64(1), int64(17), object(2)\nmemory usage: 9.5+ KB\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:79: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:79: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:80: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:81: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:82: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:83: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n# 사용 라이브러리 호출\nimport pandas as pd\nimport numpy as np \n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('pre_data/p_num_trip.xlsx')\n\n# 데이터 정보 확인하기\n# p_num_trip(년-월 별 여행 횟수)데이터 정보 확인하기\np_num_trip.info()\np_num_trip.shape\np_num_trip.head()\np_num_trip.describe()\n\n# 분석을 용이하게 하기 위해 년도별 DataFrame생성\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n# 데이터 시각화\n# 시각화 라이브러리 호출\nimport matplotlib.pyplot as plt\n\n# 그래프에 한글 표시하기\nplt.rcParams['font.family'] ='Malgun Gothic'\n# 언더바(_) 표시 가능하게 만듬\nplt.rcParams['axes.unicode_minus'] =False\n\n# 데이터 시각화\n\n# 3. 2018년도 부터 2020년도 까지 연령별 여행 횟수 증감의 트랜드 구하기\n# 데이터 선택\n\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.3, years)\n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n# 4. 가구원수 별 2018 ~ 2022년 연간 여행 횟수 비교\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.25, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           60 non-null     int64  \n 1   month          60 non-null     int64  \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             12 non-null     float64\ndtypes: float64(1), int64(19)\nmemory usage: 9.5 KB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
<<<<<<< HEAD
    "objectID": "유나.html#전처리",
    "href": "유나.html#전처리",
    "title": "여행 정보를 얻는 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\nroute\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = 2018\nroute.loc[9:17,\"year\"] = 2019\nroute.loc[18:26,\"year\"] = 2020\nroute.loc[27:35,\"year\"] = 2021\nroute.loc[36:43,\"year\"] = 2022\nroute[\"year\"]=route[\"year\"].astype(int)\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\nroute.isna().sum()\n\n# 항목\nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n                \n# 가구\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n\n# 학벌\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n\nroute.head(20)\n\n# 전처리한 데이터 파일 추출\nroute.to_excel('pre_route.xlsx', index=False)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\1872833859.py:19: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`"
  },
  {
    "objectID": "유나.html#개년-평균-경로-순위-막대그래프",
    "href": "유나.html#개년-평균-경로-순위-막대그래프",
    "title": "여행 정보를 얻는 경로",
    "section": "5개년 평균 경로 순위 막대그래프",
    "text": "5개년 평균 경로 순위 막대그래프\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n##1. 5개년 평균 경로 순위 구하기\nroute2=route.groupby(\"access_path\")\\\n.agg(total_mean = (\"total\",\"mean\"))\n\nroute2 = route2.sort_values([\"total_mean\"], ascending = False)\n\n##2. 그래프화 화기\nplt.clf()\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.subplots_adjust(bottom=0.2)\nsns.barplot(data=route2, x=\"access_path\", y=\"total_mean\", palette = \"Set1\")\nplt.xlabel('여행 정보 획득 경로')\nplt.ylabel('소계')\nplt.xticks(rotation=20)\nplt.xticks(fontsize=8)\nplt.title('5개년 평균 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\2100622369.py:14: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect."
  },
  {
    "objectID": "유나.html#연도별-정보-획득-경로-추이",
    "href": "유나.html#연도별-정보-획득-경로-추이",
    "title": "여행 정보를 얻는 경로",
    "section": "연도별 정보 획득 경로 추이",
    "text": "연도별 정보 획득 경로 추이\n\nroute['year'] = route['year'].astype(int)\nroute_path = route.groupby(['year','access_path'])['total']\\\n                   .sum().unstack()\nroute_path.index = route_path.index.astype(int)\nplt.clf()\n\nroute_path.plot(ylim=[7,45])\n\nplt.subplots_adjust(right=0.71)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1),fontsize=7)\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.title('연도 별 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n원래이미지"
  },
  {
    "objectID": "유나.html#정보-획득-경로-top4에서-성별-차이",
    "href": "유나.html#정보-획득-경로-top4에서-성별-차이",
    "title": "여행 정보를 얻는 경로",
    "section": "정보 획득 경로 Top4에서 성별 차이",
    "text": "정보 획득 경로 Top4에서 성별 차이\n\nroute_p = route[route['access_path'].isin(['acquaintance', 'experience', 'no_information', 'internet_mobile_app'])]\nroute_s = route_p.groupby('access_path')[['male', 'female']].mean()\nroute_s\n\npath = route_p['access_path'].unique()\nindex = np.arange(len(path))\nbar_width=0.2\n\nplt.clf()\nplt.bar(index, route_s[\"male\"], bar_width, label=\"male\")\nplt.bar(index + bar_width, route_s[\"female\"], bar_width, label=\"female\")\n\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.xlabel('여행 정보 획득 경로')\nplt.title('여행 정보 획득 경로 Top 4 : 성별',fontsize=13)\nplt.xticks(index + bar_width, path, fontsize=6.5)\nplt.legend(fontsize=8)\nplt.show()"
  },
  {
    "objectID": "유나.html#정보-획득-경로-top4에서-연령별-차이",
    "href": "유나.html#정보-획득-경로-top4에서-연령별-차이",
    "title": "여행 정보를 얻는 경로",
    "section": "정보 획득 경로 Top4에서 연령별 차이",
    "text": "정보 획득 경로 Top4에서 연령별 차이\n\nroute_p = route[route['access_path'].isin(['acquaintance', 'experience', 'no_information', 'internet_mobile_app'])]\nroute_m = route_p.groupby('access_path')[[\"teens\",\"young_adults\",\"middle_adults\",\"senior\"]].mean()\nroute_m\n\npath = route_p['access_path'].unique()\nindex = np.arange(len(path))\nbar_width=0.15\n\nplt.clf()\nplt.bar(index, route_m[\"teens\"], bar_width, label=\"teens\")\nplt.bar(index + bar_width, route_m[\"young_adults\"], bar_width, label=\"young_adults\")\nplt.bar(index + 2 * bar_width, route_m[\"middle_adults\"], bar_width, label=\"middle_adults\")\nplt.bar(index + 3 * bar_width, route_m[\"senior\"], bar_width, label=\"senior\")\n\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.xlabel('여행 정보 획득 경로')\nplt.title('여행 정보 획득 경로 Top 4 : 연령대',fontsize=13)\nplt.xticks(index + bar_width, path, fontsize=6)\nplt.legend(fontsize=8)\nplt.show()"
=======
    "objectID": "현주.html#전처리",
    "href": "현주.html#전처리",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "현주.html#년도별-여행지-선택-5순위",
    "href": "현주.html#년도별-여행지-선택-5순위",
    "title": "여행을 선택하는 이유",
    "section": "년도별 여행지 선택 5순위",
    "text": "년도별 여행지 선택 5순위\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 한글 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\ndf = pd.read_excel(\"./pre_data/pre_select.xlsx\")\ndf\n\ndf_2018 = df.loc[0:14]\ndf_2019 = df.loc[15:29]\ndf_2020 = df.loc[30:44]\ndf_2021 = df.loc[45:59]\ndf_2022 = df.loc[60:74]\n\ntotal_2018 = df_2018.sort_values(\"total\", ascending = False).head()\ntotal_2019 = df_2019.sort_values(\"total\", ascending = False).head()\ntotal_2020 = df_2020.sort_values(\"total\", ascending = False).head()\ntotal_2021 = df_2021.sort_values(\"total\", ascending = False).head()\ntotal_2022 = df_2022.sort_values(\"total\", ascending = False).head()\n\ntotal_all = pd.concat([total_2018, total_2019, total_2020, total_2021, total_2022]).iloc[:, :3]\ntotal_all_pivot = total_all.pivot(index='year', columns='item', values='total')\n\n\nfig = px.bar(total_all_pivot, title='년도별 여행지 선택 5순위', labels={'value': '총합', 'year': '년도'})\n# 레이아웃 설정\nfig.update_layout(\n    xaxis_title='년도',\n    yaxis_title='총합',\n    legend_title_text='Item',\n    legend=dict(\n        x=1,  # x 위치 (1은 그래프의 가장 오른쪽)\n        y=1,  # y 위치 (1은 그래프의 가장 위쪽)\n        xanchor='left',  # x 기준점\n        yanchor='top'  # y 기준점\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "현주.html#여행을-선택하는-이유",
    "href": "현주.html#여행을-선택하는-이유",
    "title": "여행을 선택하는 이유",
    "section": "여행을 선택하는 이유",
    "text": "여행을 선택하는 이유\n\n#선 그래프\nvisualappeal = total_all.query(\"item == '볼거리 제공'\")\nPopularity = total_all.query(\"item == '여행지 지명도'\")\ntime = total_all.query(\"item == '여행할 수 있는 시간'\")\n\n\n# 선 그래프 생성\nplt.figure(figsize=(10, 6))\nplt.plot(visualappeal[\"year\"], visualappeal[\"total\"], marker='o',label=\"볼거리 제공\")\nplt.plot(Popularity[\"year\"], Popularity[\"total\"], marker='o',label=\"여행지 지명도\")\nplt.plot(time[\"year\"], time[\"total\"], marker='o',label=\"여행할 수 있는 시간\")\n\n\n# 그래프에 제목과 축 레이블 추가\nplt.title(\"여행을 선택하는 이유 - 전체\")\nplt.xlabel(\"년도\")\nplt.ylabel(\"전체 %\")\nplt.legend(fontsize='x-small',loc='center left')\nplt.show()"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---남자",
    "href": "현주.html#여행지-고르는-이유---남자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 남자",
    "text": "여행지 고르는 이유 - 남자\n\n#남자\nmale_2018 = df_2018[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2019 = df_2019[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2020 = df_2020[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2021 = df_2021[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2022 = df_2022[[\"item\", \"male\"]].sort_values(by=\"item\")\n\nmale_All = pd.merge(male_2018, male_2019, how = 'left', on = 'item')\nmale_All = pd.merge(male_All, male_2020, how = 'left', on = 'item', suffixes=('', '_2020'))\nmale_All = pd.merge(male_All, male_2021, how = 'left', on = 'item', suffixes=('', '_2021'))\nmale_All = pd.merge(male_All, male_2022, how = 'left', on = 'item', suffixes=('', '_2022'))\n\n\n# 각 연도별 열 이름 변경 (이미 올바르게 되어있다면 생략 가능)\nmale_All.columns = ['item', 'male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nmale_All['total_male'] = male_All[['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_male 기준으로 정렬\nmale_All = male_All.drop(columns=['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']).sort_values(by='total_male', ascending=False)\n\nmale_All.head()\n\nM = male_All.head().plot.bar(rot = 0, color='green', title='여행지 고르는 이유 순위 - 남자')\nM.set_xticklabels(['볼거리', '지명도', '이동거리', '여행시간', '동반자유형'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---여자",
    "href": "현주.html#여행지-고르는-이유---여자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 여자",
    "text": "여행지 고르는 이유 - 여자\n\n# 여자 데이터 정렬\nfemale_2018 = df_2018[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2019 = df_2019[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2020 = df_2020[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2021 = df_2021[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2022 = df_2022[[\"item\", \"female\"]].sort_values(by=\"item\")\n\n# 데이터 병합\nfemale_All = pd.merge(female_2018, female_2019, how='left', on='item', suffixes=('_2018', '_2019'))\nfemale_All = pd.merge(female_All, female_2020, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2021, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2022, how='left', on='item')\n\n# 각 연도별 열 이름 변경 (필요한 경우)\nfemale_All.columns = ['item', 'female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nfemale_All['total_female'] = female_All[['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_female 기준으로 내림차순 정렬\nfemale_All = female_All.drop(columns=['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']).sort_values(by='total_female', ascending=False)\n\nF =female_All.head().plot.bar(rot = 0, color='blue', title='여행지 고르는 이유 순위 - 여자')\nF.set_xticklabels(['볼거리', '지명도', '여행시간', '이동거리', '음식'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
<<<<<<< HEAD
>>>>>>> b46204bbad9aa4e1b712f9f1a4390491d4e3071a
=======
  },
  {
    "objectID": "한결.html#raw-data-통계청---월별-국내여행-횟수",
    "href": "한결.html#raw-data-통계청---월별-국내여행-횟수",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "https://kosis.kr/statHtml/statHtml.do?orgId=113&tblId=DT_113_STBL_1029207&vw_cd=MT_ZTITLE&list_id=314_31401_013&scrId=&seqNo=&lang_mode=ko&obj_var_id=&itm_id=&conn_path=MT_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do\n국내 여행의 의미\n\n공간의 범위\n행정구역상 현 거주지를 벗어나 다른 지역(시/군)을 다녀온 모든 여행을 의미\n활동의 범위\n\n관광 여행\n관광, 맛집 투어, 박물관, 전시 구경, 스포츠, 레저 체험 등의 모든 활동\n기타 여행\n명절 귀성, 가족 행사, 출장, 업무 세미나 등 모든 활동"
  },
  {
    "objectID": "한결.html#data-preprocessing-데이터-전처리",
    "href": "한결.html#data-preprocessing-데이터-전처리",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "Data 저장 경로 규칙\n\n원본 데이터 : data 폴더의 R_월별_국내여행_횟수_20240714204514.xlsx\n전처리 이후 데이터 : pre_data 폴더의 p_num_trip.xlsx\n\n데이터의 기본 단위 : 천회\n데이터 전처리\n\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n# 데이터 불러오기\n# data : 원본 파일 저장 폴더\n# pre_data : 전처리 후 파일 저장 폴더\n\n# header를 두번째 행으로 고정\nnum_trip = pd.read_excel('data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n# 데이터 전처리\n\n# 열(columns)의 변수명 변경\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n# 열(columns)의 파생변수 생성\n# 연령 \n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상을 청소년, 청년, 중년, 노년 층으로 구분\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n# 가구소득\n# 저소득 ~ 200 만원 / 중위소득 200~500 만원 / 고소득 500~600이상 / 무응답\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n# 100만원 미만, 100~200만원 미만, 200~300만원 미만, 300~400만원 미만,\n# 400~500만원 미만, 500~600만원 미만, 600만원 이상, 무응답 총 8열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n# 열(columns) 삭제\n# 직업 - 직업과 여행 횟수간의 상관관계가 크게 없다고 판단하여\n# 임금봉급근로자, 고용원있는사업주, 고용원없는자영업자\n# 무급가족 종사자, 사무전문, 기술생산노무, 판매서비스\n# 자영업, 학생, 전업주부, 무직은퇴, 기타\n# 12개의 열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n# 데이터 전처리 시\n# 원본 : 39개 열, 파생변수 : 4 + 4 = 8 개열 생성, 열 삭제 : 27개 열 삭제\n# 39 + 4 + 4 - 27 = 20 개의 columns이 생성됩니다.\n\n# 데이터 확인\nnum_trip.info() \nnum_trip.shape\nnum_trip.describe()\nnum_trip.head(12)\nnum_trip.tail(12)\n\n# 데이터 문제점\n# 1. year의 null값을 채워야함\n# 2018, 2019, 2020, 2021, 2022 슬라이싱\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\n# 2. month의 '월'값을 제거한 후 int값으로 형 변환 필요\n# str 에서 맨 마지막 글자 제거\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\n# 3. nr(월급 미 응답자)의 nan값이 '-'로 대응되어 있음\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n# 데이터를 data폴더에 전처리 이후 데이터로 excel형태로 추출하고 형태 확인\n# Unnamed: 0 이라는 인덱스가 생성되는 것을 방지하기 위해 index=False로 지정\n# 가공된 데이터라는 의미인 (processing) 의 p를 파일 앞에 붙여 전처리 유무 구분\nnum_trip.to_excel(excel_writer = 'pre_data/p_num_trip.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           5 non-null      float64\n 1   month          60 non-null     object \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             60 non-null     object \ndtypes: float64(1), int64(17), object(2)\nmemory usage: 9.5+ KB\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:79: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:79: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:80: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:81: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:82: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_26904\\3134432733.py:83: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy"
  },
  {
    "objectID": "한결.html#data-visualization-데이터-시각화",
    "href": "한결.html#data-visualization-데이터-시각화",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "# 사용 라이브러리 호출\nimport pandas as pd\nimport numpy as np \n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('pre_data/p_num_trip.xlsx')\n\n# 데이터 정보 확인하기\n# p_num_trip(년-월 별 여행 횟수)데이터 정보 확인하기\np_num_trip.info()\np_num_trip.shape\np_num_trip.head()\np_num_trip.describe()\n\n# 분석을 용이하게 하기 위해 년도별 DataFrame생성\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n# 데이터 시각화\n# 시각화 라이브러리 호출\nimport matplotlib.pyplot as plt\n\n# 그래프에 한글 표시하기\nplt.rcParams['font.family'] ='Malgun Gothic'\n# 언더바(_) 표시 가능하게 만듬\nplt.rcParams['axes.unicode_minus'] =False\n\n# 데이터 시각화\n\n# 3. 2018년도 부터 2020년도 까지 연령별 여행 횟수 증감의 트랜드 구하기\n# 데이터 선택\n\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.3, years)\n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n# 4. 가구원수 별 2018 ~ 2022년 연간 여행 횟수 비교\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.25, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           60 non-null     int64  \n 1   month          60 non-null     int64  \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             12 non-null     float64\ndtypes: float64(1), int64(19)\nmemory usage: 9.5 KB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
>>>>>>> 89e2936607d010c37f0cc73cbafe6fed5415e65e
  }
]